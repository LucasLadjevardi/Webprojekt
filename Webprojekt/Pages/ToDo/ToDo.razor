@page "/todo"
@using System.Security.Claims;
@using Webprojekt.Data;
@using Microsoft.AspNetCore.Authorization

@inject ToDoDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>To-Do List</h3>

@if (ToDoList != null && ToDoList.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todo in ToDoList)
            {
                <tr>
                    <td>@todo.Titel</td>
                    <td>@todo.Beskrivelse</td>
                    <td>@todo.Dato.ToShortDateString()</td>
                    <td>
                        <button @onclick="() => EditToDo(todo.ToDoID)">Edit</button>
                        <button @onclick="() => DeleteToDo(todo.ToDoID)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No to-do items found.</p>
}

<button @onclick="CreateToDo">Create New</button>


@code
{
    private List<ToDoModel> ToDoList;
    private Guid currentUserID; // Store the current user's ID

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier); // Use the correct claim type for your user ID
            if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out Guid userId))
            {
                currentUserID = userId;
                RefreshList();
            }
        }
    }

    private void RefreshList()
    {
        // Fetch the list of to-do items associated with the current user from the database
        ToDoList = DbContext.ToDoContext.Where(todo => todo.UserID == currentUserID).ToList();
    }

    private void EditToDo(int id)
    {
        Navigation.NavigateTo($"/todo-form/{id}");
    }

    private void DeleteToDo(int id)
    {
        var todo = DbContext.ToDoContext.Find(id);
        if (todo != null)
        {
            DbContext.ToDoContext.Remove(todo);
            DbContext.SaveChanges();
            RefreshList();
        }
    }

    private void CreateToDo()
    {
        Navigation.NavigateTo("/todo-form");
    }
}