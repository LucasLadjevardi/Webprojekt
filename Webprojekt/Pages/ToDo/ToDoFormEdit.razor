@using System.Security.Claims;
@using Microsoft.AspNetCore.DataProtection;
@using System.Text;
@using System.Security.Cryptography;
@using Webprojekt.Data
@page "/todo-form/{id:int}"

@inject ToDoDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDataProtectionProvider DataProtectionProvider

<h3>Create/Edit To-Do Item</h3>

<EditForm Model="@ToDoModel" OnValidSubmit="@SaveToDo">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Title:</label>
        <InputText @bind-Value="ToDoModel.Titel" />
    </div>

    <div>
        <label>Description:</label>
        <InputText @bind-Value="ToDoModel.Beskrivelse" />
    </div>

    <div>
        <label>Date:</label>
        <InputDate @bind-Value="ToDoModel.Dato" min="@MinDate" max="@MaxDate" />
    </div>

    <button type="submit">Save</button>
    <button @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    private ToDoModel ToDoModel = new ToDoModel();
    private string MinDate;
    private string MaxDate;
    private Guid currentUserID; // Declare and initialize here
    private Dictionary<string, string> originalValues = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out Guid userId))
            {
                currentUserID = userId; // Initialize currentUserID here
            }
        }

        if (Id != 0)
        {
            ToDoModel = DbContext.ToDoContext.Find(Id);
            originalValues["Titel"] = ToDoModel.Titel; // Store original Titel
            originalValues["Beskrivelse"] = ToDoModel.Beskrivelse; // Store original Beskrivelse
            ToDoModel.Titel = DecryptAndDecode(ToDoModel.Titel);
            ToDoModel.Beskrivelse = DecryptAndDecode(ToDoModel.Beskrivelse);
        }

        // Set minimum and maximum dates dynamically
        int currentYear = DateTime.Now.Year;
        MinDate = new DateTime(currentYear - 150, 1, 1).ToString("yyyy-MM-dd");
        MaxDate = new DateTime(currentYear + 100, 12, 31).ToString("yyyy-MM-dd");
    }

    private void SaveToDo()
    {
        if (ToDoModel.ToDoID == 0)
        {
            // New To-Do item
            ToDoModel.UserID = currentUserID;
            if (!IsSameValue("Titel") || !IsSameValue("Beskrivelse"))
            {
                ToDoModel.Titel = Convert.ToBase64String(Encrypt(ToDoModel.Titel));
                ToDoModel.Beskrivelse = Convert.ToBase64String(Encrypt(ToDoModel.Beskrivelse));
            }
            DbContext.ToDoContext.Add(ToDoModel);
        }
        else
        {
            // Existing To-Do item
            var existingItem = DbContext.ToDoContext.Find(ToDoModel.ToDoID);
            existingItem.Dato = ToDoModel.Dato;
            existingItem.UserID = currentUserID;

            if (!IsSameValue("Titel") || !IsSameValue("Beskrivelse"))
            {
                existingItem.Titel = Convert.ToBase64String(Encrypt(ToDoModel.Titel));
                existingItem.Beskrivelse = Convert.ToBase64String(Encrypt(ToDoModel.Beskrivelse));
            }

            DbContext.ToDoContext.Update(existingItem);
        }

        DbContext.SaveChanges();
        Navigation.NavigateTo("/todo");
    }

    private bool IsSameValue(string fieldName)
    {
        if (originalValues.ContainsKey(fieldName))
        {
            return originalValues[fieldName] == ToDoModel.GetType().GetProperty(fieldName).GetValue(ToDoModel)?.ToString();
        }
        return false;
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/todo");
    }

    private byte[] Encrypt(string input)
    {
        var protector = DataProtectionProvider.CreateProtector("TodoProtection");
        return protector.Protect(Encoding.UTF8.GetBytes(input));
    }

    private string DecryptAndDecode(string encryptedInput)
    {
        var protector = DataProtectionProvider.CreateProtector("TodoProtection");
        byte[] decryptedBytes = protector.Unprotect(Convert.FromBase64String(encryptedInput));
        return Encoding.UTF8.GetString(decryptedBytes);
    }

    [Parameter]
    public int Id { get; set; }
}